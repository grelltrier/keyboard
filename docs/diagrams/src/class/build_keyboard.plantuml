@startuml build_keyboard
!define LIGHTBLUE
!includeurl https://raw.githubusercontent.com/grelltrier/RedDress-PlantUML/master/style.puml

package keyboard {
    +class LayoutMeta {
        {static} +deserialize() -> HashMap<String, LayoutMeta>
        {static} from(layout_deserialized: LayoutDeserialized) -> LayoutMeta
        {static} get_key_meta_for_all_keys(
        key_arrangement_deserialized: &[KeyIds],
        key_meta: &HashMap<String, KeyDeserialized>) -> HashMap<String, KeyMeta>
    }

    +class Location {
        +x: i32
        +y: i32
        +width: i32
        +height: i32
    }

    +class KeyArrangement {
        no_rows: i32
        no_columns: i32

        {static} +from(key_arrangement_deserialized: &[KeyIds], key_meta: &HashMap<String, KeyMeta>) -> KeyArrangement
        +get_no_rows() -> i32
        +get_no_columns() -> i32
        +get_key_arrangement() -> &HashMap<String, Location>
        {static} get_uncentered_key_arrangement(key_arrangement_deserialized: &[KeyIds], key_meta: &HashMap<String, KeyMeta>) -> (HashMap<String, Location>, Vec<i32>)
        {static} get_centered_key_arrangement(mut uncentered_key_arrangement: HashMap<String, Location>,row_widths: &[i32]) -> (HashMap<String, Location>, i32, i32)
    }

    +class KeyMeta {
        +actions: HashMap<Interaction, Vec<KeyAction>>
        +key_display: KeyDisplay
        +outline: Outline
        +popup: Option<Vec<String>>
        +styles: Option<Vec<String>>

        {static} from(key_id: &str, key_deserialized: Option<&KeyDeserialized>) -> KeyMeta
        {static} default(key_id: &str) -> KeyMeta
        {static} make_interaction_keyaction_hashmap(deserialized_actions: &HashMap<KeyEvent, Vec<KeyAction>>) -> HashMap<Interaction, Vec<KeyAction>>
        {static} +add_tap_action_to_hashmap(duration: TapDuration, motion: TapMotion, action: KeyAction, hashmap: &mut HashMap<Interaction, Vec<KeyAction>>)
    }

    +abstract class LayoutYamlParser{
        {static} +get_layouts() -> HashMap<String, LayoutDeserialized>
        {static} add_layout_to_hashmap(hashmap_with_layouts: &mut HashMap<String, LayoutDeserialized>, layout_result: Result<(String, LayoutDeserialized), serde_yaml::Error>)
    }

    +class KeyDeserialized {
        +actions: Option<HashMap<KeyEvent, Vec<KeyAction>>>
        +key_display: Option<KeyDisplay>
        +outline: Option<Outline>
        +popup: Option<Vec<String>>
        +styles: Option<Vec<String>>
    }

    +class LayoutDeserialized {
        +views: HashMap<String, Vec<KeyIds>>

        {static} +from(source: LayoutSource) -> Result<(String, LayoutDeserialized), serde_yaml::Error>)
    }

    
    Keyboard -- "many" LayoutMeta : > created from
    LayoutMeta -- LayoutDeserialized : > created from
    KeyArrangement "many" -* LayoutMeta : < stores
    KeyArrangement *-- "many" Location : > maps key id to
    LayoutMeta *- "many" KeyMeta : > maps info about
    LayoutMeta -- LayoutYamlParser : > calls method
    LayoutDeserialized "many" -- LayoutYamlParser : < creates
    LayoutDeserialized *- KeyDeserialized : > maps info about
    KeyMeta "many" -- KeyDeserialized : > created from
}
@enduml